/* <sc-view> DEMO_DB.INTERVAL_FUNCTION </sc-view> */
REPLACE VIEW DEMO_DB.INTERVAL_FUNCTION
AS
SELECT
TO_DATE('2000-01-01') - CAST(731 AS INTERVAL DAY(4)) INT_DAY,
TO_DATE('2000-01-01') - CAST(12 AS INTERVAL MONTH(4)) INT_MONTH,
TO_DATE('2000-01-01') - CAST(2 AS INTERVAL YEAR(4)) INT_YEAR,
TO_DATE('2000-01-01') + INTERVAL '14' DAY INT_DAY_ALT,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + CAST('10:15' AS INTERVAL HOUR(2) TO MINUTE) INT_HR2MIN,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + CAST('23:59:59.999999' AS INTERVAL HOUR(2) TO SECOND(6)) INT_HR2SEC,
CAST(TIMESTAMP '2005-02-03 12:12:12.340000' AS PERIOD(TIMESTAMP)),
CAST(TIMESTAMP '2005-02-03 12:12:12.340000' AS PERIOD(DATE));


/* <sc-view> DEMO_DB.vtruncround</sc-view> */
-- Trunc and round
-- With a missing dependency.
REPLACE VIEW DEMO_DB.vtruncround
AS
select 
    region, 
    TRUNC(DATEFIRSTPURCHASE, 'MON') TRUNC_DATE,
    TRUNC(DATEFIRSTPURCHASE) TRUNC_DATE_DD,
    ROUND(DATEFIRSTPURCHASE, 'RM') RND_DATE,
    avg(yearlyincome) avg_annual_income,
    TRUNC(AVG(YEARLYINCOME)) TRUNC_INCOME,
    TRUNC(AVG(YEARLYINCOME), 2) TRNC_INCOME_2,
    ROUND(AVG(TOTALCHILDREN),0) RND_AVG_CHILDREN,
    avg(totalchildren) avg_children, 
    ROUND(AVG(AGE)) RND_AVG_AGE,
    avg(age) avg_age 
from DEMO_DB.vtargetmail
where datefirstpurchase in ('2011-02-08', '2011-02-09')
group by 
    region, 
    TRUNC(DATEFIRSTPURCHASE, 'MON'),
    TRUNC(DATEFIRSTPURCHASE),
    ROUND(DATEFIRSTPURCHASE, 'RM');


/* <sc-view> DEMO_DB.REACHABLE_FROM </sc-view> */
-- Recursive view  
REPLACE RECURSIVE VIEW DEMO_DB.REACHABLE_FROM (DESTINATION, COST, LEGS) AS (
      SELECT 
        ROOT.DESTINATION, 
        ROOT.COST, 
        1 AS LEGS
      FROM 
        DEMO_DB.FLIGHTS AS ROOT
      WHERE 
        ROOT.SOURCE = 'Paris'
    UNION ALL
      SELECT 
        OUTT.DESTINATION, 
        INN.COST + OUTT.COST, 
        INN.LEGS + 1 AS LEGS
      FROM 
        REACHABLE_FROM AS INN, 
        DEMO_DB.FLIGHTS AS OUTT
      WHERE 
        INN.DESTINATION = OUTT.SOURCE
        AND INN.LEGS <= 20);        


/* <sc-view> DEMO_DB.INTERVAL_DATA_TYPE_V </sc-view> */
-- INTERVAL, PERIOD TYPES, SELECT * LOCKING ROW FOR ACCESS, QUALIFY ***/
REPLACE VIEW DEMO_DB.INTERVAL_DATA_TYPE_V
AS 
LOCKING ROW FOR ACCESS
SELECT * FROM DEMO_DB.INTERVAL_DATA_TYPE;

/* <sc-view> DEMO_DB.PERIOD_OVERLAP_LDIFF </sc-view> */
REPLACE VIEW DEMO_DB.PERIOD_OVERLAP_LDIFF
AS 
LOCKING ROW FOR ACCESS
SELECT 'OVERLAP' FUNC, FIRST_NAME, LAST_NAME
FROM DEMO_DB.EMPLOYEE_PERIOD
WHERE JOB_DURATION OVERLAPS
PERIOD(DATE '2009-01-01', DATE '2010-09-24')
UNION ALL
SELECT 'LDIFF' FUNC, FIRST_NAME, LAST_NAME
FROM DEMO_DB.EMPLOYEE_PERIOD
WHERE INTERVAL(JOB_DURATION LDIFF PERIOD(DATE '2009-01-01', DATE '2010-09-24')) MONTH > 3 
UNION ALL
SELECT 'RDIFF' FUNC, FIRST_NAME, LAST_NAME
FROM DEMO_DB.EMPLOYEE_PERIOD
WHERE JOB_DURATION RDIFF PERIOD(DATE '2009-01-01', DATE '2010-09-24') IS NOT NULL;


/* <sc-view> DEMO_DB.INTERVAL_DATA </sc-view> */
REPLACE VIEW DEMO_DB.INTERVAL_DATA
AS
SELECT 
TO_DATE('2000-01-01') + INTERVAL_YEAR_TYPE INTERVAL_YEAR, 
TO_DATE('2000-01-01') + INTERVAL_MONTH_TYPE INTERVAL_MONTH,
TO_DATE('2000-01-01') + INTERVAL_YEAR2MONTH_TYPE INTERVAL_YR2MON,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_DAY_TYPE INTERVAL_DAY,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_DAY2HOUR_TYPE INTERVAL_DAY2HR,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_DAY2MINUTE_TYPE INTERVAL_DAY2MIN,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_DAY2SECOND_TYPE INTERVAL_DAY2SEC,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_HOUR_TYPE INTERVAL_HR,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_HOUR2MINUTE_TYPE INTERVAL_HR2MIN,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_HOUR2SECOND_TYPE INTERVAL_HR2SEC,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_MINUTE_TYPE INTERVAL_MIN,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_MINUTE2SECOND_TYPE INTERVAL_MIN2SEC,
TIMESTAMP '2000-01-01 01:01:01.500-01:00' + INTERVAL_SECOND_TYPE INTERVAL_SEC
FROM
DEMO_DB.INTERVAL_DATA_TYPE_V;

/* <sc-view> DEMO_DB.PERIOD_INTERVAL_BEGIN </sc-view> */
REPLACE VIEW DEMO_DB.PERIOD_INTERVAL_BEGIN
AS
SELECT
  PEP.PERSON_ID,
  CAST(BEGIN(PEP.EMPLOYMENT_PERIOD) AS TIMESTAMP)    AS BEGINEMPLOYMENT,
  PL.LOGIN_DTM,
  INTERVAL(
    PERIOD(
      CAST(BEGIN(PEP.EMPLOYMENT_PERIOD) AS TIMESTAMP),
      PL.LOGIN_DTM
    )
  ) HOUR(4) AS HOURSBEFOREFIRSTLOGIN
FROM DEMO_DB.PERSON_EMPLOYMENT_PERIOD    AS PEP
JOIN DEMO_DB.PERSON_LOGIN                AS PL
  ON PEP.PERSON_ID = PL.PERSON_ID
QUALIFY RANK() OVER (
  PARTITION BY PL.PERSON_ID
  ORDER BY PL.LOGIN_DTM
) = 1;


/* <sc-view> DEMO_DB.MY_VIEW_1 </sc-view> */
-- MY VIEW 1
REPLACE VIEW DEMO_DB.MY_VIEW_1
  AS
  SELECT MY_COLUMN FROM DEMO_DB.MY_VIEW_2

/* <sc-view> DEMO_DB.MY_VIEW_2 </sc-view> */
-- MY VIEW 2
REPLACE VIEW DEMO_DB.MY_VIEW_2
  AS
  SELECT MY_COLUMN FROM DEMO_DB.MY_VIEW_3

/* <sc-view> DEMO_DB.MY_VIEW_2 </sc-view> */
-- MY VIEW 3
REPLACE VIEW DEMO_DB.MY_VIEW_3
  AS
  SELECT * FROM DEMO_DB.SOME_MISSING_OBJECT
